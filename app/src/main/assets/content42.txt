5.Java语言的发展前景
    自从Sun被甲骨文收购以后，Java的发展前景就变得扑朔迷离起来，很多程序开发者都感到很迷惑。2010年4月9日，被称为Java之父的詹姆斯・高斯林又在个人博客上宣布离开Oracle，这一事件更为Java的前景增加了一层迷雾。但是在进入5月份之后，一切开始变得明朗起来。
    在Oracle的活动发布网站上，连续发布了多个关于Java的推广活动。5月12日，Oracle主要产品负责人Dave Hofert将大谈对JavaSE商业应用的改进和革新。根据宣传资料，在这次演讲中，DaveHofert将提到以下问题：商业版与社区版本之间平台支持的差异。如何获得专家帮助，以帮助企业增强其Java应用。对于旧版本的安全修补问题。可使用的发布工具和更新。6月18、19、20、27日，将分别在赫尔辛基、斯图加特、布达佩斯、伦敦举行Oracle、Sun专家与用户见面会，在见面会上与用户一起探讨Java的发展路线。主要讨论的问题包括Oracle将如何继续投资和改进Java技术，并且还会向用户通报JavaSE、JavaME专家团队的最新消息、JavaFX和JDK7最新的消息，以及OracleBerkeley DB的相关信息。5月3日，已经离开Oracle近一个月的Java之父詹姆斯・高斯林在他的博客上表达了对NetBeans 6.9 和 FX1.3发布的关心。这两个项目最新版本的发布，可以证明Oracle已经开始兑现当初的承诺。詹姆斯・高斯林在其早期的博客中，也透露了不会放弃Java事业，只是需要解决一些与Oracle之间的法律问题。这一切迹象表明，Oracle绝对不会轻易放弃Java这块巨大的蛋糕，并且Oracle也开始逐渐学会了对开源社区的尊重。首先在JDK的商业版本方面，Oracle将会继续深入挖掘Java的商业利益，与其固有产品进行更深入的整合。在社区版本方面，Oracle将与Java开发者一起探讨和研发Java的技术。这里需要特别提到的一个产品是Oracle BerkeleyDB，该产品是Oracle一直支持的一个开源非关系数据库产品，在NoSQL大行其道的今天，如果Oracle能够将BerkeleyDB与Java进行深入整合，将会为Java带来更多的活力和生命。从詹姆斯・高斯林的表现来看，他似乎与Oracle之间已经达成某种谅解，并且有进一步合作的可能性。
贡献及影响
    1991年，Sun公司的James Gosling，Bill Joe等人，为电视、控制烤面包机等家用电器的交互操作开发了一个Oak（橡树）软件，他是Java的前身。当时，Oak并没有引起人们的注意，直到1994年，随着互联网和3W的飞速发展，他们用Java编制了HotJava浏览器，得到了Sun公司首席执行官Scott McNealy的支持，得以研发和发展。由于Oak商标已经被Oak Technology注册，1995年Oak短暂更名为Green，最后更名为Java。Java的得名还有段小插曲呢，一天，Java小组成员正在喝咖啡时，议论给新语言起个什么名字的问题，有人提议用Java（Java是印度尼西亚盛产咖啡的一个岛屿），这个提议得到了其他成员的赞同，于是就采用Java来命名此新语言。很快Java被工业界认可，许多大公司如IBM Microsoft.DEC等购买了Java的使用权，并被美国杂志PC Magazine评为1995年十大优秀科技产品。从此，开始了Java应用的新篇章。
Java的诞生是对传统计算机模式的挑战，对计算机软件开发和软件产业都产生了深远的影响：
.	
    软件4A目标要求软件能达到任何人在任何地方在任何时间对任何电子设备都能应用。这样能满足软件平台上互相操作，具有可伸缩性和重用性并可即插即用等分布式计算模式的需求。
.	
.	
    基于构建开发方法的崛起，引出了CORBA国际标准软件体系结构和多层应用体系框架。在此基础上形成了Java.2平台和.NET平台两大派系，推动了整个IT业的发展。
.	
.	
    对软件产业和工业企业都产生了深远的影响，软件从以开发为中心转到了以服务为中心。中间提供商，构件提供商，服务器软件以及咨询服务商出现。企业必须重塑自我，B2B的电子商务将带动整个新经济市场，使企业获得新的价值，新的增长，新的商机，新的管理。
.	
.	
    对软件开发带来了新的革命，重视使用第三方构件集成，利用平台的基础设施服务，实现开发各个阶段的重要技术，重视开发团队的组织和文化理念，协作，创作，责任，诚信是人才的基本素质。
.	
Java模拟器
    Java手机游戏模拟器主要针对诺基亚S60系列手机以及其他大屏手机（小屏游戏也可运行，但不能全屏显示），是一款非常简单而且实用的JAVA游戏模拟器，可以正常运行绝大部分JAVA手机游戏！注：暂不支持游戏后缀名为sis的游戏。程序的使用是傻瓜式的，在电脑上安装好以后，所有的游戏jar文件都会和模拟器相关连，直接双击游戏jar文件就可以进入模拟器玩游戏啦！电脑的小数字键盘和方向键就可以直接控制游戏，与模拟器的按键相对应，当然也可以用鼠标直接点击控制。
虚拟机
    Java虚拟机（Java Virtual Machine) 简称JVM，Java虚拟机是一个想象中的机器，在实际的计算机上通过软件模拟来实现。Java虚拟机有自己想象中的硬件，如处理器、堆栈、寄存器等，还具有相应的指令系统。
引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用模式Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。
字节码校验器，类加载器，垃圾回收机制（人为不可控制，优先级别最低）。
内存模型
    在处理器层面上，内存模型定义了一个充要条件，“让当前的处理器可以看到其他处理器写入到内存的数据”以及“其他处理器可以看到当前处理器写入到内存的数据”。有些处理器有很强的内存模型，能够让所有的处理器在任何时候任何指定的内存地址上都可以看到完全相同的值。而另外一些处理器则有较弱的内存模型，在这种处理器中，必须使用内存屏障（一种特殊的指令）来刷新本地处理器缓存并使本地处理器缓存无效，目的是为了让当前处理器能够看到其他处理器的写操作或者让其他处理器能看到当前处理器的写操作。这些内存屏障通常在lock和unlock操作的时候完成。内存屏障在高级语言中对程序员是不可见的。
相关消息
    在宣布修正Java严重0day漏洞的消息发出一天后，甲骨文公布了Java SE 7u11更新，它包含了安全漏洞CVE-2013-0422的补丁，同时也改变了默认的Java安全级别设置，任何未签名的Java Applet或Java Web Start应用程序运行时总是会被提示，这样可以防止恶意应用被下载，对用户来说这可能会带来的影响是需要多确认一下。
其他应用编辑
    Android是第一个内置支持Java的操作系统，Android应用程序使用Java语言编写。Android开发水平的高低很大程度上取决于Java语言核心能力是否扎实。另外一方面，3G应用往往会和企业级应用相互结合。因此，在3G―Android课程体系中将Android课程与Java EE课程紧密结合，以Android课程为主，以Java EE课程为辅，配合真实的企业级项目，不但可以深入掌握基于Android平台的智能手机开发技术，更重要的是还系统掌握了智能移动终端与Java EE服务器端相结合的诸多领域商业的应用。
    Java试图通过新的方式解决软件编写的复杂性。很多人认为Java语言做到了它承诺的一切。但是Java并不是一门完美的语言。
整体性
    并不是所有的工程和环境需要企业级别的复杂性，比如一个简单的个人网站或者独自编程的程序师所写的程序。这些程序师会发现Java的复杂管理对于自己要做的程序来说过于强大了。一些人觉得Java在面向对象上面做的没有Ruby和Smalltalk纯粹。但是最新出现的用Java实现的语言Groovy解决了这些问题。
作为一种已经创建的新技术，Java显然综合了很多语言的特性，比如C++、C语言、Python等等。一些对于Java的评论认为Java的不变性在动摇。
语言问题
    有些程序师不喜欢原始类型（primitive type）和类（class）的分离，尤其是那些曾经使用过Smalltalk和Ruby的程序师。Java的代码相对于其他的代码来说过于冗长，这与它的轻便化声明相违背。
    Java是一种单层继承的语言。这也导致了程序师在试图使用多重继承时候的不便，而很多语言都可以使用这个特性。但是Java可以使用接口类，把多重继承可能导致的风险减少到最小。Java不支持运算符重载，这是为了防止运算符重载使得代码的功能变得不清晰。但是用Java实现的语言Groovy可以进行运算符重载。过去Java对于文本的操作和其他语言，比如Perl和PHP相比差的较多，但Java在1.4版本时候引入了正则表达式。
类库问题
    使用Swing平台编写的带有GUI（图形用户接口）的程序和其他原始程序非常不同。选用AWT工具包编写程序的程序师看到的都是原始接口，而且也无法获得先进的GUI编程支持，如果使用的话，就要提供每个平台上面所需的API，这将是一项庞大的工程。Swing则是完全用Java语言所写的程序，避免了接口元素重复的问题，只使用所有平台都支持的最基本的绘图机制。但是很多用户不知道如何在Java风格和Windows风格之间进行转换，结果造成了Java程序的接口在很多程序中非常特殊。苹果电脑已经提供了优化过的Java运行时程序，包含了Mac OS X的经典Aqua接口风格。
性能问题
    由于Java编译器和虚拟机的不同对Java代码的性能影响比语言本身的影响大的多，所以统一讨论Java的程序的性能经常是有误导性的。据IBM的数据，在同样的硬件上2001年时的IBMJDK版本的性能是1996年的JDK版本的十倍左右。即使是在同一时期，不同公司的JDK和JRE的性能也不一样，比如SUN、IBM、BEA等公司都有自己开发的JDK和JRE。
    Java语言的一些特性不可避免的有额外的性能代价。例如数组范围检查、运行时类型检查等等；Java程序的性能还会因为不同的动态复杂性和垃圾处理机制使用的多少而各有不同。如果JVM的实现比较优化的话，那么这些功能甚至可以增加存储器分配的性能。这和总是使用STL或者托管C++的程序的情况类似。
    Java的设计目的主要是安全性和可携性，所以对于一些特性。比如对硬件架构和存储器地址访问的直接访问都被去除了，如果需要间接调用这些底层功能的话，就需要使用JNI（Java本地接口）来调用本地代码。而间接访问意味着频繁调用这些特性时性能损失会很大，微软的.NET平台也有这样的问题。
