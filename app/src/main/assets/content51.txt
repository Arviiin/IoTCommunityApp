3.C语言组成
基本构成
    数据类型
    C的数据类型包括：整型、字符型、实型或浮点型（单精度和双精度）、枚举类型、数组类型、结构体类型、共用体类型、指针类型和空类型。[16] 
    常量与变量
    常量其值不可改变，符号常量名通常用大写。
    变量是以某标识符为名字，其值可以改变的量。标识符是以字母或下划线开头的一串由字母、数字或下划线构成的序列，请注意第一个字符必须为字母或下划线，否则为不合法的变量名。变量在编译时为其分配相应存储单元。
数组
    如果一个变量名后面跟着一个有数字的中括号，这个声明就是数组声明。字符串也是一种数组。它们以ASCII的NULL作为数组的结束。要特别注意的是，方括内的索引值是从0算起的。[17] 
    指针
    如果一个变量声明时在前面使用 * 号，表明这是个指针型变量。换句话说，该变量存储一个地址，而 *（此处特指单目运算符 * ，下同。C语言中另有 双目运算符 *） 则是取内容操作符，意思是取这个内存地址里存储的内容。指针是 C 语言区别于其他同时代高级语言的主要特征之一。[18] 
指针不仅可以是变量的地址，还可以是数组、数组元素、函数的地址。通过指针作为形式参数可以在函数的调用过程得到一个以上的返回值，不同于return（z）这样的仅能得到一个返回值。
    指针是一把双刃剑，许多操作可以通过指针自然的表达，但是不正确的或者过分的使用指针又会给程序带来大量潜在的错误。[17] 
    字符串
    C语言的字符串其实就是以'\0'字符结尾的char型数组，使用字符型并不需要引用库，但是使用字符串就需要C标准库里面的一些用于对字符串进行操作的函数。它们不同于字符数组。使用这些函数需要引用头文件<string.h>。[19] 
    文件输入/输出
    在C语言中，输入和输出是经由标准库中的一组函数来实现的。在ANSI C中，这些函数被定义在头文件<stdio.h>；中。
    标准输入/输出
    有三个标准输入/输出是标准I/O库预先定义的：
    stdin标准输入
    stdout标准输出
    stderr输入输出错误[16] 
    运算
    C语言的运算非常灵活，功能十分丰富，运算种类远多于其它程序设计语言。在表达式方面较其它程序语言更为简洁，如自加、自减、逗号运算和三目运算使表达式更为简单，但初学者往往会觉的这种表达式难读，关键原因就是对运算符和运算顺序理解不透不全。当多种不同运算组成一个运算表达式，即一个运算式中出现多种运算符时，运算的优先顺序和结合规则显得十分重要。在学习中，对此合理进行分类，找出它们与数学中所学到运算之间的不同点之后，记住这些运算也就不困难了，有些运算符在理解后更会牢记心中，将来用起来得心应手，而有些可暂时放弃不记，等用到时再记不迟。
    先要明确运算符按优先级不同分类，《C程序设计》运算符可分为15种优先级，从高到低，优先级为1 ~ 15，除第2．13级和第14级为从右至左结合外，其它都是从左至右结合，它决定同级运算符的运算顺序。[20] 
    关键字
    关键字又称为保留字，就是已被C语言本身使用，不能作其它用途使用的字。例如关键字不能用作变量名、函数名等标识符
    由ISO标准定义的C语言关键字共32个：
auto double int struct break else long switch
case enum register typedef char extern return union
const float short unsigned continue for signed void
default goto sizeof volatile do if while static inline
restrict _Bool _Complex _Imaginary _Generic[21] 
基本数据类型
    void：声明函数无返回值或无参数，声明无类型指针，显示丢弃运算结果。（C89标准新增）
    char：字符型类型数据，属于整型数据的一种。（K&R时期引入）
    int：整型数据，表示范围通常为编译器指定的内存字节长。（K&R时期引入）
    float：单精度浮点型数据，属于浮点数据的一种。（K&R时期引入）
    double：双精度浮点型数据，属于浮点数据的一种。（K&R时期引入）
    _Bool:布尔型（C99标准新增）
    _Complex:复数的基本类型（C99标准新增）
    _Imaginary:虚数，与复数基本类型相似，没有实部的纯虚数（C99标准新增）
    _Generic:提供重载的接口入口（C11标准新增）
    类型修饰关键字
    short：修饰int，短整型数据，可省略被修饰的int。（K&R时期引入）
    long：修饰int，长整型数据，可省略被修饰的int。（K&R时期引入）
    long long：修饰int，超长整型数据，可省略被修饰的int。（C99标准新增）
    signed：修饰整型数据，有符号数据类型。（C89标准新增）
    unsigned：修饰整型数据，无符号数据类型。（K&R时期引入）
    restrict:用于限定和约束指针，并表明指针是访问一个数据对象的唯一且初始的方式。（C99标准新增）
    复杂类型关键字
    struct：结构体声明。（K&R时期引入）
    union：联合体声明。（K&R时期引入）
    enum：枚举声明。（C89标准新增）
    typedef：声明类型别名。（K&R时期引入）
    sizeof：得到特定类型或特定类型变量的大小。（K&R时期引入）
    inline:内联函数用于取代宏定义，会在任何调用它的地方展开。（C99标准新增）
    存储级别关键字
    auto：指定为自动变量，由编译器自动分配及释放。通常在栈上分配。与static相反。当变量未指定时默认为auto。（K&R时期引入）
    static：指定为静态变量，分配在静态变量区，修饰函数时，指定函数作用域为文件内部。（K&R时期引入）
    register：指定为寄存器变量，建议编译器将变量存储到寄存器中使用，也可以修饰函数形参，建议编译器通过寄存器而不是堆栈传递参数。（K&R时期引入）
    extern：指定对应变量为外部变量，即标示变量或者函数的定义在别的文件中，提示编译器遇到此变量和函数时在其他模块中寻找其定义。（K&R时期引入）
    const：指定变量不可被当前线程改变（但有可能被系统或其他线程改变）。（C89标准新增）
    volatile：指定变量的值有可能会被系统或其他线程改变，强制编译器每次从内存中取得该变量的值，阻止编译器把该变量优化成寄存器变量。（C89标准新增）
流程控制关键字
跳转结构
    return：用在函数体中，返回特定值（如果是void类型，则不返回函数值）。（K&R时期引入）
    continue：结束当前循环，开始下一轮循环。（K&R时期引入）
    break：跳出当前循环或switch结构。（K&R时期引入）
    goto：无条件跳转语句。（K&R时期引入）
    分支结构
    if：条件语句，后面不需要放分号。（K&R时期引入）
    else：条件语句否定分支（与if连用）。（K&R时期引入）
    switch：开关语句（多重分支语句）。（K&R时期引入）
    case：开关语句中的分支标记，与switch连用。（K&R时期引入）
    default：开关语句中的“其他”分支，可选。（K&R时期引入）
    编译
    #define 预编译宏
    #if 表达式 #else if 表达式 #else #endif 条件编译
    #ifdef 宏 #else #endif 条件编译
    #ifndef 宏 #else #endif 条件编译与条件编译
    语法结构
    顺序结构 
    顺序结构的程序设计是最简单的，只要按照解决问题的顺序写出相应的语句就行，它的执行顺序是自上而下，依次执行。
    例如：a = 3，b = 5，现交换a，b的值，这个问题就好像交换两个杯子水，这当然要用到第三个杯子，假如第三个杯子是c，那么正确的程序为：c = a； a = b； b = c；执行结果是a = 5，b = c = 3如果改变其顺序，写成：a = b； c = a； b =c；则执行结果就变成a = b = c = 5，不能达到预期的目的，初学者最容易犯这种错误。顺序结构可以独立使用构成一个简单的完整程序，常见的输入、计算，输出三步曲的程序就是顺序结构，例如计算圆的面积，其程序的语句顺序就是输入圆的半径r，计算s = 3.14159*r*r，输出圆的面积s。不过大多数情况下顺序结构都是作为程序的一部分，与其它结构一起构成一个复杂的程序，例如分支结构中的复合语句、循环结构中的循环体等。[22] 
    选择结构
    顺序结构的程序虽然能解决计算、输出等问题，但不能做判断再选择。对于要先做判断再选择的问题就要使用选择结构。选择结构的执行是依据一定的条件选择执行路径，而不是严格按照语句出现的物理顺序。选择结构的程序设计方法的关键在于构造合适的分支条件和分析程序流程，根据不同的程序流程选择适当的选择语句。选择结构适合于带有逻辑或关系比较等条件判断的计算，设计这类程序时往往都要先绘制其程序流程图，然后根据程序流程写出源程序，这样做把程序设计分析与语言分开，使得问题简单化，易于理解。程序流程图是根据解题分析所绘制的程序执行流程图。
    循环结构
    循环结构可以减少源程序重复书写的工作量，用来描述重复执行某段算法的问题，这是程序设计中最能发挥计算机特长的程序结构，C语言中提供四种循环，即goto循环、while循环、do while循环和for循环。四种循环可以用来处理同一问题，一般情况下它们可以互相代替换，但一般不提倡用goto循环，因为强制改变程序的顺序经常会给程序的运行带来不可预料的错误。
    特别要注意在循环体内应包含趋于结束的语句（即循环变量值的改变），否则就可能成了一个死循环，这是初学者的一个常见错误。
    三个循环的异同点：用while和do…while循环时，循环变量的初始化的操作应在循环体之前，而for循环一般在语句1中进行的；while循环和for循环都是先判断表达式，后执行循环体，而do…while循环是先执行循环体后判断表达式，也就是说do…while的循环体最少被执行一次，而while循环和for就可能一次都不执行。另外还要注意的是这三种循环都可以用break语句跳出循环，用continue语句结束本次循环，而goto语句与if构成的循环，是不能用break和 continue语句进行控制的。
    顺序结构、分支结构和循环结构并不彼此孤立的，在循环中可以有分支、顺序结构，分支中也可以有循环、顺序结构，其实不管哪种结构，均可广义的把它们看成一个语句。在实际编程过程中常将这三种结构相互结合以实现各种算法，设计出相应程序，但是要编程的问题较大，编写出的程序就往往很长、结构重复多，造成可读性差，难以理解，解决这个问题的方法是将C程序设计成模块化结构。 
    具体内容：
    for循环
    for循环结构是c语言中最具有特色的循环语句，使用最为灵活方便，它的一般形式为：
    for（表达式1;表达式2;表达式3）循环体语句 。（其中；不能省略）
    表达式
    表达式1为初值表达式，用于在循环开始前为循环变量赋初值。
    表达式2是循环控制逻辑表达式，它控制循环执行的条件，决定循环的次数。
    表达式3为循环控制变量修改表达式，它使for循环趋向结束。
    循环体语句是在循环控制条件成立的情况下被反复执行的语句。
但是在整个for循环过程中，表达式1只计算一次，表达式2和表达式3则可能计算多次，也可能一次也不计算。循环体可能多次执行，也可能一次都不执行。
先执行表达式2，然后执行循环结构，最后表达式3，一直这样循环下去。
for循环语句是c语言种功能最为强大的语句，甚至在一定程度上可以代替其他的循环语句。
    do
    do循环结构，do 1 while⑵；的执行顺序是1->2->1...循环，2为循环条件。
    while
    while循环结构，while(1) 2; 的执行顺序是1->2->1...循环，1为循环条件
以上循环语句，当循环条件表达式为真则继续循环，为假则跳出循环。
程序结构
    C语言的模块化程序结构用函数来实现，即将复杂的C程序分为若干模块，每个模块都编写成一个C函数，然后通过主函数调用函数及函数调用函数来实现一大型问题的C程序编写，因此常说：C程序=主函数+子函数。因此，对函数的定义、调用、值的返回等中要尤其注重理解和应用，并通过上机调试加以巩固。[25] 
判断语句（选择结构）：
   if 语句：“如果”语句；if―else 语句：“若…（则）…否则…”语句；    switch 语句：“切换”语句；switch―case：“切换―情况”语句。
    循环语句（循环结构）：
    while 语句：“当…”语句；do―while 语句：“做…当…（时候）”语句；for 语句：条件语句（即“（做）…为了…”语句）。
    跳转语句（循环结构：是否循环）：
    goto 语句：“转舵”语句，也称“跳转”语句；break 语句：“中断”（循环）语句，即结束整个循环；continue 语句：“继续”语句（结束本次循环，继续下一次循环）；return 语句：“返回”语句。
    需要说明的是：
    1、一个C语言源程序可以由一个或多个源文件组成。[26] 
    2、每个源文件可由一个或多个函数组成。
    3、一个源程序不论由多少个文件组成，都有一个且只能有一个main函数，即主函数。是整个程序的入口。[2] 
    4、源程序中可以有预处理命令（包括include 命令，ifdef、ifndef命令、define命令），预处理命令通常应放在源文件或源程序的最前面。
    5、每一个说明，每一个语句都必须以分号结尾。但预处理命令，函数头和花括号“}”之后不能加分号。（结构体、联合体、枚举型的声明的“}”后要加“ ；”。）
    6、标识符，关键字之间必须至少加一个空格以示间隔。若已有明显的间隔符，也可不再加空格来间隔。
    书写规则
    1、一个说明或一个语句占一行。
    2、用{} 括起来的部分，通常表示了程序的某一层次结构。{}一般与该结构语句的第一个字母对齐，并单独占一行。
    3、低一层次的语句或说明可比高一层次的语句或说明缩进若干格后书写。以便看起来更加清晰，增加程序的可读性。在编程时应力求遵循这些规则，以养成良好的编程风格。
   函数
    C程序是由一组变量或是函数的外部对象组成的。 函数是一个自我包含的完成一定相关功能的执行代码段。我们可以把函数看成一个“黑盒子”，你只要将数据送进去就能得到结果，而函数内部究竟是如何工作的的，外部程序是不知道的。外部程序所知道的仅限于输入给函数什么以及函数输出什么。函数提供了编制程序的手段，使之容易读、写、理解、排除错误、修改和维护。
   C程序中函数的数目实际上是不限的，如果说有什么限制的话，那就是，一个C程序中必须至少有一个函数，而且其中必须有一个并且仅有一个以main为名，这个函数称为主函数，整个程序从这个主函数开始执行。
    C 语言程序鼓励和提倡人们把一个大问题划分成一个个子问题，对应于解决一个子问题编制一个函数，因此，C 语言程序一般是由大量的小函数而不是由少量大函数构成的，即所谓“小函数构成大程序”。这样的好处是让各部分相互充分独立，并且任务单一。因而这些充分独立的小模块也可以作为一种固定规格的小“构件”， 用来构成新的大程序。
    C语言发展的那么多年来，用C语言开发的系统和程序浩如烟海。在发展的同时也积累了很多能直接使用的库函数。
    ANSI C提供了标准C语言库函数。
    C语言初学者比较喜欢的Turbo C 2.0提供了400多个运行时函数，每个函数都完成特定的功能，用户可随意调用。这些函数总体分成输入输出函数、数学函数、字符串和内存函数、与BIOS和DOS有关的函数、 字符屏幕和图形功能函数、过程控制函数、目录函数等。
    Windows系统所提供的Windows SDK中包含了数千个跟Windows应用程序开发相关的函数。
    其他操作系统，如Linux，也同样提供了大量的函数让应用程序开发人员调用。
作为程序员应尽量熟悉目标平台库函数其功能。这样才能游刃有余地开发特定平台的应用程序。比如作为Windows应用程序的开发者，应尽量熟悉Windows SDK；作为Linux应用程序开发者，应尽量熟悉Linux系统调用和POSIX函数规范。
    运算符号
    比较特别的是，比特右移（>>）运算符可以是算术（左端补最高有效位）或是逻辑（左端补 0）位移。例如，将 11100011 右移 3 比特，算术右移后成为 11111100，逻辑右移则为 00011100。因算术比特右移较适于处理带负号整数，所以几乎所有的编译器都是算术比特右移。
    运算符的优先级从高到低大致是：单目运算符、算术运算符、关系运算符、逻辑运算符、条件运算符、赋值运算符（=）和逗号运算符。 
()、 []、 -> 、 .、!、 ++、 --	圆括号、方括号、指针、成员、逻辑非、自加、自减
